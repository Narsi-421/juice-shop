name: CI/CD via Self-Hosted Runner

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: narsi421/juice-shop
  SONAR_PROJECT_KEY: juice-shop
  SONAR_PROJECT_NAME: JuiceShop
  SONAR_URL: http://192.168.15.20:9001
  DEFECTDOJO_URL: http://192.168.15.20:8080

jobs:
  juice-shop-pipeline:
    runs-on: self-hosted

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Set up Node.js 21
      uses: actions/setup-node@v4
      with:
        node-version: '21'

    - name: Add SonarScanner to PATH
      run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH
    
    - name: SonarQube Analysis
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName=${{ env.SONAR_PROJECT_NAME }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ env.SONAR_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Docker Build
      run: docker build -t $IMAGE_NAME:${{ github.run_number }} .

    - name: Trivy Scan
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $HOME/.trivy-cache:/root/.cache/ \
          -v ${{ github.workspace }}:/root/scan \
          aquasec/trivy image \
          --format json \
          --output /root/scan/trivy-report.json \
          $IMAGE_NAME:${{ github.run_number }}

    - name: Docker Push to DockerHub
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u narsi421 --password-stdin
        docker push $IMAGE_NAME:${{ github.run_number }}

    - name: Upload Trivy to DefectDojo
      run: |
        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
          -F "scan_type=Trivy Scan" \
          -F "engagement=4" \
          -F "file=@trivy-report.json" \
          -F "active=true" \
          -F "verified=true"

    - name: Download SonarQube Report
      run: |
        curl -u ${{ secrets.SONAR_TOKEN }}: \
          "$SONAR_URL/api/issues/search?componentKeys=${{ env.SONAR_PROJECT_KEY }}&resolved=false" \
          -o sonarqube-report.json

    - name: Upload SonarQube to DefectDojo
      run: |
        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
          -F "scan_type=SonarQube Scan" \
          -F "engagement=4" \
          -F "file=@sonarqube-report.json" \
          -F "active=true" \
          -F "verified=true"

          - name: Upload Dependabot Alerts to DefectDojo
      env:
        GH_TOKEN: ${{ secrets.GH_SECURITY_TOKEN }}
        DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
        DEFECTDOJO_URL: ${{ env.DEFECTDOJO_URL }}
  run: |
        curl -s -H "Authorization: token $GH_TOKEN" \
             -H "Accept: application/vnd.github+json" \
             https://api.github.com/repos/${{ github.repository }}/dependabot/alerts \
             -o raw-dependabot-alerts.json

        python3 <<EOF
        import json
        import csv

with open("raw-dependabot-alerts.json") as f:
    alerts = json.load(f)

with open("dependabot.csv", "w") as out:
    writer = csv.writer(out)
    writer.writerow(["Vulnerability ID", "Package", "Severity", "URL", "Summary"])
    for alert in alerts:
        writer.writerow([
            alert.get("security_advisory", {}).get("ghsa_id", "N/A"),
            alert.get("security_vulnerability", {}).get("package", {}).get("name", "N/A"),
            alert.get("security_vulnerability", {}).get("severity", "UNKNOWN"),
            alert.get("html_url", ""),
            alert.get("security_advisory", {}).get("summary", "")
        ])
EOF

        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_TOKEN" \
          -F "scan_type=Generic Findings Import" \
          -F "engagement=4" \
          -F "file=@dependabot.csv" \
          -F "active=true" \
          -F "verified=true"


    - name: Deploy to Remote Host
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull $IMAGE_NAME:${{ github.run_number }}
          docker stop juice-shop || true
          docker rm juice-shop || true
          docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:${{ github.run_number }}
          sleep 5
          docker logs juice-shop || true

    - name: Archive JSON Reports
      uses: actions/upload-artifact@v4
      with:
        name: scan-results
        path: |
          trivy-report.json
          sonarqube-report.json
          dependabot-alerts.json
