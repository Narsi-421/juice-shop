name: Send Dependabot Alerts to DefectDojo

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  DEFECTDOJO_PRODUCT_NAME: Owasp-juice-shop
  DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL_ngrok }}/api/v2
  ENGAGEMENT_ID: 4

jobs:
  upload_dependabot:
    runs-on: ubuntu-latest

    steps:
      - name: Extract repository name
        run: |
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Fetch Dependabot Alerts from GitHub REST API
        run: |
          curl -s -H "Authorization: token ${{ secrets.GH_SECURITY_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/dependabot/alerts \
               -o dependabot-raw.json

      - name: Convert Dependabot Alerts to DefectDojo CSV Format
        run: |
          python3 <<EOF
          import json, csv
          from datetime import datetime

          with open("dependabot-raw.json") as f:
              alerts = json.load(f)

          with open("dependabot.csv", "w") as out:
              writer = csv.writer(out)
              writer.writerow([
                  "Title", "CWE ID", "Severity", "Description", "Mitigation", "Impact",
                  "References", "File Path", "Line Number", "Component Name", "Component Version", "Date"
              ])

              for alert in alerts:
                  advisory = alert.get("security_advisory", {})
                  vuln = alert.get("security_vulnerability", {})
                  dep = alert.get("dependency", {})

                  pkg = vuln.get("package", {}).get("name", "unknown")
                  severity = vuln.get("severity", "Medium")
                  cwe_list = advisory.get("cwes", [])
                  cwe = cwe_list[0].get("cwe_id", "1035") if cwe_list else "1035"
                  summary = advisory.get("summary", "No summary")
                  description = advisory.get("description", "")
                  references = advisory.get("references", [])
                  ref_url = references[0].get("url", "") if references else ""
                  path = dep.get("manifest_path", "")
                  version_range = vuln.get("vulnerable_version_range", "")
                  created_at = alert.get("created_at", "")
                  date_str = created_at.split("T")[0] if created_at else datetime.now().strftime("%Y-%m-%d")

                  writer.writerow([
                      f"{pkg} - {summary}",
                      cwe,
                      severity,
                      description,
                      "Update to a safe version",
                      "May allow attacker to exploit the system",
                      ref_url,
                      path,
                      "",  # line number
                      pkg,
                      version_range,
                      date_str
                  ])
          EOF

      - name: Upload CSV to DefectDojo
        run: |
          curl -X POST "${{ env.DEFECTDOJO_URL_ngrok }}/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F "product_name=${{ env.DEFECTDOJO_PRODUCT_NAME }}" \
            -F "engagement=${{ env.ENGAGEMENT_ID }}" \
            -F "scan_type=Github Vulnerability Scan" \
            -F "file=@dependabot-security-alerts.csv" \
            -F "active=true" \
            -F "verified=true"
